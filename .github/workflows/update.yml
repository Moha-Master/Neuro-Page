name: Update Schedule
on:
  schedule:
    - cron: '21 */1 * * *'
  workflow_dispatch:
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install discord.js axios moment-timezone cheerio sharp dotenv

      - name: Run Updater Script
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
        run: node scripts/updater.js

      - name: Check for changes in tracked files
        id: check-changes
        run: |
          # Compare the current working directory with the last commit (HEAD)
          # to find changes in specific files and directories.
          # Redirect stderr to /dev/null and use || true to prevent script failure if no diff exists.
          CHANGED_FILES=$(git diff --name-only HEAD -- images/schedule.png images/schedule.webp public/ 2>/dev/null || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Detected changes in: $CHANGED_FILES"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant changes detected."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes to repository (if any)
        # Attempt to commit changes, even if image/public files haven't changed, other files might have.
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add public/ images/ # Stage all potentially updated files
          git commit -m "Update schedule and followers" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Deploy files to server via SSH/Tar (if files changed)
        # This step only runs if the 'check-changes' step detected file modifications.
        if: steps.check-changes.outputs.should_deploy == 'true'
        uses: appleboy/ssh-action@v0.1.6 # Pin to a specific version for stability
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }} # Use default SSH port 22 if SSH_PORT is not set
          script: |
            # Define the remote web root path from secrets
            REMOTE_WEB_ROOT="${{ secrets.REMOTE_PATH }}" # This should be /webservices/neuro-page

            echo "Starting deployment to ${REMOTE_WEB_ROOT} on server using tar over SSH."

            # Use tar to archive the specified files and directories locally,
            # then pipe the archive directly over SSH to the remote server,
            # where it is extracted into the REMOTE_WEB_ROOT.
            # This performs the entire transfer in a single SSH session for the data.
            # -c: create archive
            # -f -: write archive to standard output
            # images/schedule.png images/schedule.webp public/: files/dirs to archive
            # |: pipe stdout to stdin of the next command (ssh)
            # ssh ...: establishes the SSH connection
            # "tar -x -C \"${REMOTE_WEB_ROOT}\"": command executed on the remote server
            #    -x: extract files from archive
            #    -C "${REMOTE_WEB_ROOT}": change directory to REMOTE_WEB_ROOT before extracting.
            #                              This is crucial as tar preserves relative paths.
            #                              e.g., images/schedule.png becomes ${REMOTE_WEB_ROOT}/images/schedule.png
            #                              and public/ becomes ${REMOTE_WEB_ROOT}/public/
            tar -c -f - images/schedule.png images/schedule.webp public/ | \
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/devnull \
                -p ${{ secrets.SSH_PORT || 22 }} \
                ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} \
                "tar -x -C \"${REMOTE_WEB_ROOT}\""
            echo "All specified files and directories deployed to ${REMOTE_WEB_ROOT}."
