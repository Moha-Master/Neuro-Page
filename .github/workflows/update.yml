name: Update Schedule
on:
  schedule:
    - cron: '21 */1 * * *'
  workflow_dispatch:
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install discord.js axios moment-timezone cheerio sharp dotenv

      - name: Run Updater Script
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
        run: node scripts/updater.js

      - name: Check for changes in tracked files
        id: check-changes
        run: |
          # Compare current HEAD with the previous commit to find changes in specific files and directories.
          # We check for changes in images/schedule.png, images/schedule.webp, and anything within the public/ directory.
          # Redirect stderr to /dev/null and use || true to prevent script failure if no diff exists.
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- images/schedule.png images/schedule.webp public/ 2>/dev/null || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Detected changes in: $CHANGED_FILES"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant changes detected."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes to repository (if any)
        # Attempt to commit changes, even if image/public files haven't changed, other files might have.
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add public/ images/ # Stage all potentially updated files
          git commit -m "Update schedule and followers" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Deploy files to server via SCP (if files changed)
        # This step only runs if the 'check-changes' step detected file modifications.
        if: steps.check-changes.outputs.should_deploy == 'true'
        uses: appleboy/ssh-action@v0.1.6 # Pin to a specific version for stability
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }} # Use default SSH port 22 if SSH_PORT is not set
          script: |
            # Define the remote path path from secrets
            REMOTE_PATH="${{ secrets.REMOTE_PATH }}" # This should be /webservices/neuro-page

            echo "Deploying to ${REMOTE_PATH} on server."

            # Ensure target directories exist on the server
            mkdir -p "${REMOTE_PATH}/public"
            mkdir -p "${REMOTE_PATH}/images"

            # Copy specific image files to the remote images directory
            # -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null is used to disable host key checking,
            # which is common for ephemeral CI/CD connections. Ensure your server is trusted.
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                -P ${{ secrets.SSH_PORT || 22 }} \
                images/schedule.png images/schedule.webp \
                ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:"${REMOTE_PATH}/images/"
            echo "Files images/schedule.png and images/schedule.webp deployed to ${REMOTE_PATH}/images/"

            # Copy the public directory contents recursively to the remote public directory
            # The trailing slash on 'public/' ensures only contents are copied, but here we want public/ itself within REMOTE_PATH
            # So, scp -r public/ destination will place public/ inside destination.
            scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                -P ${{ secrets.SSH_PORT || 22 }} \
                public/ \
                ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:"${REMOTE_PATH}/"
            echo "Directory public/ and its contents deployed to ${REMOTE_PATH}/public/"
